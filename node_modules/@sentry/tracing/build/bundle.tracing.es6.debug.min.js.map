{"version":3,"file":"bundle.tracing.es6.debug.min.js","sources":["../../../types/src/severity.ts","../../../utils/src/global.ts","../../../utils/src/is.ts","../../../utils/src/browser.ts","../../../utils/src/polyfill.ts","../../../utils/src/error.ts","../../../utils/src/flags.ts","../../../utils/src/dsn.ts","../../../utils/src/enums.ts","../../../utils/src/logger.ts","../../../utils/src/string.ts","../../../utils/src/object.ts","../../../utils/src/stacktrace.ts","../../../utils/src/supports.ts","../../../utils/src/instrument.ts","../../../utils/src/misc.ts","../../../utils/src/normalize.ts","../../../utils/src/memo.ts","../../../utils/src/syncpromise.ts","../../../utils/src/promisebuffer.ts","../../../utils/src/severity.ts","../../../utils/src/status.ts","../../../utils/src/time.ts","../../../utils/src/tracing.ts","../../../utils/src/envelope.ts","../../../utils/src/ratelimit.ts","../../../hub/src/scope.ts","../../../hub/src/session.ts","../../../hub/src/flags.ts","../../../hub/src/hub.ts","../../../minimal/src/index.ts","../../../core/src/api.ts","../../../core/src/flags.ts","../../../core/src/integration.ts","../../../core/src/baseclient.ts","../../../core/src/request.ts","../../../core/src/transports/noop.ts","../../../core/src/transports/base.ts","../../../core/src/version.ts","../../../core/src/integrations/functiontostring.ts","../../../core/src/integrations/inboundfilters.ts","../../../browser/src/stack-parsers.ts","../../../browser/src/eventbuilder.ts","../../../browser/src/flags.ts","../../../browser/src/transports/utils.ts","../../../utils/src/async.ts","../../../browser/src/transports/base.ts","../../../utils/src/clientreport.ts","../../../browser/src/transports/fetch.ts","../../../browser/src/transports/xhr.ts","../../../browser/src/transports/new-fetch.ts","../../../browser/src/transports/new-xhr.ts","../../../browser/src/backend.ts","../../../core/src/basebackend.ts","../../../browser/src/helpers.ts","../../../browser/src/integrations/globalhandlers.ts","../../../browser/src/integrations/trycatch.ts","../../../browser/src/integrations/breadcrumbs.ts","../../../browser/src/integrations/linkederrors.ts","../../../browser/src/integrations/useragent.ts","../../../browser/src/integrations/dedupe.ts","../../../browser/src/client.ts","../../../browser/src/sdk.ts","../../../browser/src/index.ts","../../src/utils.ts","../../src/errors.ts","../../src/constants.ts","../../src/span.ts","../../src/transaction.ts","../../src/idletransaction.ts","../../src/hubextensions.ts","../../src/browser/backgroundtab.ts","../../src/browser/web-vitals/lib/bindReporter.ts","../../src/browser/web-vitals/lib/initMetric.ts","../../src/browser/web-vitals/lib/generateUniqueID.ts","../../src/browser/web-vitals/lib/observe.ts","../../src/browser/web-vitals/lib/onHidden.ts","../../src/browser/web-vitals/lib/getVisibilityWatcher.ts","../../src/browser/web-vitals/getLCP.ts","../../src/browser/metrics.ts","../../src/browser/web-vitals/getCLS.ts","../../src/browser/web-vitals/getFID.ts","../../src/browser/request.ts","../../src/browser/router.ts","../../src/browser/browsertracing.ts","../../src/index.bundle.ts","../../../browser/src/version.ts","../../../core/src/sdk.ts"],"sourcesContent":["/**\n * TODO(v7): Remove this enum and replace with SeverityLevel\n */\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// TODO: in v7, these can disappear, because they now also exist in `@sentry/utils`. (Having them there rather than here\n// is nice because then it enforces the idea that only types are exported from `@sentry/types`.)\nexport const SeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug', 'critical'] as const;\nexport type SeverityLevel = typeof SeverityLevels[number];\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `getGlobalObject`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof SentryGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const global = (obj || getGlobalObject()) as SentryGlobal;\n  const __SENTRY__ = (global.__SENTRY__ = global.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nfunction isBuiltin(wat: unknown, ty: string): boolean {\n  return objectToString.call(wat) === `[object ${ty}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): boolean {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { getGlobalObject } from './global';\nimport { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  const global = getGlobalObject<Window>();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * Debug flags need to be declared in each package individually and must not be imported across package boundaries,\n * because some build tools have trouble tree-shaking imported guards.\n *\n * As a convention, we define debug flags in a `flags.ts` file in the root of a package's `src` folder.\n *\n * Debug flag files will contain \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during\n * our, or the user's build process. Take care when introducing new flags - they must not throw if they are not\n * replaced.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\nimport { IS_DEBUG_BUILD } from './flags';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\nfunction dsnFromString(str: string): DsnComponents {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  // TODO this is for backwards compatibility, and can be removed in a future version\n  if ('user' in components && !('publicKey' in components)) {\n    components.publicKey = components.user;\n  }\n\n  return {\n    user: components.publicKey || '',\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean | void {\n  if (!IS_DEBUG_BUILD) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from: DsnLike): DsnComponents {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n\n  validateDsn(components);\n\n  return components;\n}\n","export const SeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug', 'critical'] as const;\nexport type SeverityLevel = typeof SeverityLevels[number];\n","import { WrappedFunction } from '@sentry/types';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { getGlobalObject, getGlobalSingleton } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<typeof CONSOLE_LEVELS[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in global.console && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as typeof CONSOLE_LEVELS[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (IS_DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            global.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (IS_DEBUG_BUILD) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nexport function convertToPlainObject(value: unknown): {\n  [key: string]: unknown;\n} {\n  let newObj = value as {\n    [key: string]: unknown;\n  };\n\n  if (isError(value)) {\n    newObj = {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value as ExtendedError),\n    };\n  } else if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    newObj = {\n      type: event.type,\n      target: serializeEventTarget(event.target),\n      currentTarget: serializeEventTarget(event.currentTarget),\n      ...getOwnProperties(event),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = event.detail;\n    }\n  }\n  return newObj;\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: { [key: string]: unknown }): { [key: string]: unknown } {\n  const extractedProps: { [key: string]: unknown } = {};\n  for (const property in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, property)) {\n      extractedProps[property] = obj[property];\n    }\n  }\n  return extractedProps;\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(val)) {\n      if (typeof val[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(val[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return (val as any[]).map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","import { StackFrame } from '@sentry/types';\n\nconst STACKTRACE_LIMIT = 50;\n\nexport type StackParser = (stack: string, skipFirst?: number) => StackFrame[];\nexport type StackLineParserFn = (line: string) => StackFrame | undefined;\nexport type StackLineParser = [number, StackLineParserFn];\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n\n    for (const line of stack.split('\\n').slice(skipFirst)) {\n      for (const parser of sortedParsers) {\n        const frame = parser(line);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: StackFrame[]): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].function || '';\n  const lastFrameFunction = localStack[localStack.length - 1].function || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(frame => ({\n      ...frame,\n      filename: frame.filename || localStack[0].filename,\n      function: frame.function || '?',\n    }))\n    .reverse();\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n","import { IS_DEBUG_BUILD } from './flags';\nimport { getGlobalObject } from './global';\nimport { logger } from './logger';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      IS_DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { getGlobalObject } from './global';\nimport { isInstanceOf, isString } from './is';\nimport { CONSOLE_LEVELS, logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      IS_DEBUG_BUILD && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      IS_DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function (originalConsoleMethod: () => any): Function {\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      const xhrInfo: SentryWrappedXMLHttpRequest['__sentry_xhr__'] = (xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function (): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhr.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      if (this.__sentry_xhr__ && args[0] !== undefined) {\n        this.__sentry_xhr__.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount -= 1;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function (msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n","import { Primitive } from '@sentry/types';\n\nimport { isError, isEvent, isNaN, isSyntheticEvent } from './is';\nimport { memoBuilder, MemoFunc } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\nexport function normalize(input: unknown, depth: number = +Infinity, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, there is no key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // If the value has a `toJSON` method, see if we can bail and let it do the work\n  const valueWithToJSON = value as unknown & { toJSON?: () => Primitive | ObjOrArray<unknown> };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      return valueWithToJSON.toJSON();\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // Get the simple cases out of the way first\n  if (value === null || (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // We're also done if we've reached the max depth\n  if (depth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = (isError(value) || isEvent(value) ? convertToPlainObject(value) : value) as ObjOrArray<unknown>;\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo);\n\n    numAdded += 1;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)\n    if (value === void 0) {\n      return '[undefined]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    return `[object ${(Object.getPrototypeOf(value) as Prototype).constructor.name}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import { SentryError } from './error';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          // eslint-disable-next-line no-plusplus\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","import { Severity } from '@sentry/types';\n\nimport { SeverityLevel, SeverityLevels } from './enums';\n\nfunction isSupportedSeverity(level: string): level is Severity {\n  return SeverityLevels.indexOf(level as SeverityLevel) !== -1;\n}\n/**\n * Converts a string-based level into a {@link Severity}.\n *\n * @param level string representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: SeverityLevel | string): Severity {\n  if (level === 'warn') return Severity.Warning;\n  if (isSupportedSeverity(level)) {\n    return level;\n  }\n  return Severity.Log;\n}\n","import { EventStatus } from '@sentry/types';\n/**\n * Converts an HTTP status code to sentry status {@link EventStatus}.\n *\n * @param code number HTTP status code\n * @returns EventStatus\n */\nexport function eventStatusFromHttpCode(code: number): EventStatus {\n  if (code >= 200 && code < 300) {\n    return 'success';\n  }\n\n  if (code === 429) {\n    return 'rate_limit';\n  }\n\n  if (code >= 400 && code < 500) {\n    return 'invalid';\n  }\n\n  if (code >= 500) {\n    return 'failed';\n  }\n\n  return 'unknown';\n}\n","import { getGlobalObject } from './global';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","import { TraceparentData } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n","import { Envelope } from '@sentry/types';\n\nimport { isPrimitive } from './is';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Get the type of the envelope. Grabs the type from the first envelope item.\n */\nexport function getEnvelopeType<E extends Envelope>(envelope: E): string {\n  const [, [[firstItemHeader]]] = envelope;\n  return firstItemHeader.type;\n}\n\n/**\n * Serializes an envelope into a string.\n */\nexport function serializeEnvelope(envelope: Envelope): string {\n  const [headers, items] = envelope;\n  const serializedHeaders = JSON.stringify(headers);\n\n  // Have to cast items to any here since Envelope is a union type\n  // Fixed in Typescript 4.2\n  // TODO: Remove any[] cast when we upgrade to TS 4.2\n  // https://github.com/microsoft/TypeScript/issues/36390\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (items as any[]).reduce((acc, item: typeof items[number]) => {\n    const [itemHeaders, payload] = item;\n    // We do not serialize payloads that are primitives\n    const serializedPayload = isPrimitive(payload) ? String(payload) : JSON.stringify(payload);\n    return `${acc}\\n${JSON.stringify(itemHeaders)}\\n${serializedPayload}`;\n  }, serializedHeaders);\n}\n","// Keeping the key broad until we add the new transports\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  headers: Record<string, string | null | undefined>,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const parameters = limit.split(':', 2);\n      const headerDelay = parseInt(parameters[0], 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!parameters[1]) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of parameters[1].split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  }\n\n  return updatedRateLimits;\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalSingleton, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata?: { [key: string]: unknown } = {};\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional information about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction && this._span.transaction.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = this._sdkProcessingMetadata;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number;\n  public started: number;\n  public duration?: number = 0;\n  public status: SessionStatus = 'ok';\n  public environment?: string;\n  public ipAddress?: string;\n  public init: boolean = true;\n  public ignoreDuration: boolean = false;\n\n  public constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = timestampInSeconds();\n    this.timestamp = startingTime;\n    this.started = startingTime;\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  public update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (!this.ipAddress && context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!this.did && !context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || timestampInSeconds();\n    if (context.ignoreDuration) {\n      this.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.init !== undefined) {\n      this.init = context.init;\n    }\n    if (!this.did && context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (this.ignoreDuration) {\n      this.duration = undefined;\n    } else if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      const duration = this.timestamp - this.started;\n      this.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (!this.ipAddress && context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (!this.userAgent && context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  public close(status?: Exclude<SessionStatus, 'ok'>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === 'ok') {\n      this.update({ status: 'exited' });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  public toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: this.init,\n      // Make sure that sec is converted to ms for date constructor\n      started: new Date(this.started * 1000).toISOString(),\n      timestamp: new Date(this.timestamp * 1000).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: {\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      },\n    });\n  }\n}\n","/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * Debug flags need to be declared in each package individually and must not be imported across package boundaries,\n * because some build tools have trouble tree-shaking imported guards.\n *\n * As a convention, we define debug flags in a `flags.ts` file in the root of a package's `src` folder.\n *\n * Debug flag files will contain \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during\n * our, or the user's build process. Take care when introducing new flags - they must not throw if they are not\n * replaced.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  SessionContext,\n  Severity,\n  Span,\n  SpanContext,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalObject,\n  getGlobalSingleton,\n  isNodeEnv,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { Scope } from './scope';\nimport { Session } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @hidden\n * @deprecated Can be removed once `Hub.getActiveDomain` is removed.\n */\nexport interface DomainAsCarrier extends Carrier {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  members: { [key: string]: any }[];\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimic the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimic the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (event.type !== 'transaction') {\n      this._lastEventId = eventId;\n    }\n\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      IS_DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(context: SpanContext): Span {\n    return this._callExtensionMethod('startSpan', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer && layer.scope;\n    const session = scope && scope.getSession();\n    if (session) {\n      session.close();\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    if (scope) {\n      scope.setSession();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const global = getGlobalObject<{ navigator?: { userAgent?: string } }>();\n    const { userAgent } = global.navigator || {};\n\n    const session = new Session({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        currentSession.update({ status: 'exited' });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession && scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const { scope, client } = this.getStackTop();\n    if (client && client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (client as any)[method](...args, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    IS_DEBUG_BUILD && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Returns the active domain, if one exists\n * @deprecated No longer used; remove in v7\n * @returns The domain, or undefined if there is no active domain\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function getActiveDomain(): DomainAsCarrier | undefined {\n  IS_DEBUG_BUILD && logger.warn('Function `getActiveDomain` is deprecated and will be removed in a future version.');\n\n  const sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const sentry = getMainCarrier().__SENTRY__;\n    const activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  const syntheticException = new Error('Sentry syntheticException');\n\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  const syntheticException = new Error(message);\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  return callOnHub('startTransaction', { ...context }, customSamplingContext);\n}\n","import { DsnComponents, DsnLike, SdkMetadata } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Stores details about a Sentry SDK\n */\nexport interface APIDetails {\n  /** The DSN as passed to Sentry.init() */\n  initDsn: DsnLike;\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  metadata: SdkMetadata;\n  /** The internally used Dsn object. */\n  readonly dsn: DsnComponents;\n  /** The envelope tunnel to use. */\n  readonly tunnel?: string;\n}\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: DsnComponents;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): DsnComponents {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    return getBaseApiEndpoint(this._dsnObject);\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return getStoreEndpoint(this._dsnObject);\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  }\n}\n\n/** Initializes API Details */\nexport function initAPIDetails(dsn: DsnLike, metadata?: SdkMetadata, tunnel?: string): APIDetails {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel,\n  } as APIDetails;\n}\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents, target: 'store' | 'envelope'): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/${target}/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n  });\n}\n\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'store');\n}\n\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getStoreEndpointWithUrlEncodedAuth(dsn: DsnComponents): string {\n  return `${getStoreEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string): string {\n  return tunnel ? tunnel : `${_getEnvelopeEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nexport function getRequestHeaders(\n  dsn: DsnComponents,\n  clientName: string,\n  clientVersion: string,\n): { [key: string]: string } {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n  header.push(`sentry_client=${clientName}/${clientVersion}`);\n  header.push(`sentry_key=${dsn.publicKey}`);\n  if (dsn.pass) {\n    header.push(`sentry_secret=${dsn.pass}`);\n  }\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', '),\n  };\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n      if (dialogOptions.user.name) {\n        encodedOptions += `&name=${encodeURIComponent(dialogOptions.user.name)}`;\n      }\n      if (dialogOptions.user.email) {\n        encodedOptions += `&email=${encodeURIComponent(dialogOptions.user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * Debug flags need to be declared in each package individually and must not be imported across package boundaries,\n * because some build tools have trouble tree-shaking imported guards.\n *\n * As a convention, we define debug flags in a `flags.ts` file in the root of a package's `src` folder.\n *\n * Debug flag files will contain \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during\n * our, or the user's build process. Take care when introducing new flags - they must not throw if they are not\n * replaced.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n} & { initialized?: boolean };\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  IS_DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`\n  // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be\n  // considered a member of the index the way the actual integrations are\n  addNonEnumerableProperty(integrations, 'initialized', true);\n  return integrations;\n}\n","/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  DsnComponents,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  Severity,\n  Transport,\n} from '@sentry/types';\nimport {\n  checkOrSetAlreadyCaught,\n  dateTimestampInSeconds,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  normalize,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      IS_DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      IS_DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      IS_DEBUG_BUILD && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      IS_DEBUG_BUILD && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._getBackend().getTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientDoneProcessing(timeout).then(clientFinished => {\n      return this.getTransport()\n        .close(timeout)\n        .then(transportFlushed => clientFinished && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      IS_DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      session.update({\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = resolvedSyncPromise<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (evt) {\n        // TODO this is more of the hack trying to solve https://github.com/getsentry/sentry-javascript/issues/2809\n        // it is only attached as extra data to the event if the event somehow skips being normalized\n        evt.sdkProcessingMetadata = {\n          ...evt.sdkProcessingMetadata,\n          normalizeDepth: `${normalize(normalizeDepth)} (${typeof normalizeDepth})`,\n        };\n      }\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth, maxBreadth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth, maxBreadth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth, maxBreadth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth, maxBreadth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    normalized.sdkProcessingMetadata = { ...normalized.sdkProcessingMetadata, baseClientNormalized: true };\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        IS_DEBUG_BUILD && logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n    const transport = this.getTransport();\n\n    type RecordLostEvent = NonNullable<Transport['recordLostEvent']>;\n    type RecordLostEventParams = Parameters<RecordLostEvent>;\n\n    function recordLostEvent(outcome: RecordLostEventParams[0], category: RecordLostEventParams[1]): void {\n      if (transport.recordLostEvent) {\n        transport.recordLostEvent(outcome, category);\n      }\n    }\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      recordLostEvent('sample_rate', 'event');\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          recordLostEvent('event_processor', event.type || 'event');\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return _ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          recordLostEvent('before_send', event.type || 'event');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n}\n\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\nfunction _ensureBeforeSendRv(rv: PromiseLike<Event | null> | Event | null): PromiseLike<Event | null> | Event | null {\n  const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n  if (isThenable(rv)) {\n    return rv.then(\n      event => {\n        if (!(isPlainObject(event) || event === null)) {\n          throw new SentryError(nullErr);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`beforeSend rejected with ${e}`);\n      },\n    );\n  } else if (!(isPlainObject(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n  return rv;\n}\n","import {\n  Event,\n  EventEnvelope,\n  EventItem,\n  SdkInfo,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\n\nimport { APIDetails, getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: APIDetails): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  api: APIDetails,\n): [SessionEnvelope, SentryRequestType] {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n\n  // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n  const type = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n\n  // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n  const envelopeItem = [{ type } as { type: 'session' | 'sessions' }, session] as SessionItem;\n  const envelope = createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n\n  return [envelope, type];\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: APIDetails): SentryRequest {\n  const [envelope, type] = createSessionEnvelope(session, api);\n  return {\n    body: serializeEnvelope(envelope),\n    type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),\n  };\n}\n\n/**\n * Create an Envelope from an event. Note that this is duplicated from below,\n * but on purpose as this will be refactored in v7.\n */\nexport function createEventEnvelope(event: Event, api: APIDetails): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  const envelopeHeaders = {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n  const eventItem: EventItem = [\n    {\n      type: eventType,\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n    },\n    event,\n  ];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || !!api.tunnel;\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  let body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      const innerErr = newErr as Error;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: { message: innerErr.message, stack: innerErr.stack },\n      });\n    }\n  }\n\n  const req: SentryRequest = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body,\n    type: eventType,\n    url: useEnvelope\n      ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n      : getStoreEndpointWithUrlEncodedAuth(api.dsn),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = {\n      event_id: event.event_id as string,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n    };\n    const eventItem: EventItem = [\n      {\n        type: eventType,\n        sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n      },\n      req.body,\n    ];\n    const envelope = createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n\n  return req;\n}\n","import { Event, Response, Transport } from '@sentry/types';\nimport { resolvedSyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return resolvedSyncPromise({\n      reason: 'NoopTransport: Event has been skipped because no Dsn is configured.',\n      status: 'skipped',\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return resolvedSyncPromise(true);\n  }\n}\n","import { Envelope, EventStatus } from '@sentry/types';\nimport {\n  disabledUntil,\n  eventStatusFromHttpCode,\n  getEnvelopeType,\n  isRateLimited,\n  makePromiseBuffer,\n  PromiseBuffer,\n  RateLimits,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nexport const ERROR_TRANSPORT_CATEGORY = 'error';\n\nexport const TRANSACTION_TRANSPORT_CATEGORY = 'transaction';\n\nexport const ATTACHMENT_TRANSPORT_CATEGORY = 'attachment';\n\nexport const SESSION_TRANSPORT_CATEGORY = 'session';\n\ntype TransportCategory =\n  | typeof ERROR_TRANSPORT_CATEGORY\n  | typeof TRANSACTION_TRANSPORT_CATEGORY\n  | typeof ATTACHMENT_TRANSPORT_CATEGORY\n  | typeof SESSION_TRANSPORT_CATEGORY;\n\nexport type TransportRequest = {\n  body: string;\n  category: TransportCategory;\n};\n\nexport type TransportMakeRequestResponse = {\n  body?: string;\n  headers?: {\n    [key: string]: string | null;\n    'x-sentry-rate-limits': string | null;\n    'retry-after': string | null;\n  };\n  reason?: string;\n  statusCode: number;\n};\n\nexport type TransportResponse = {\n  status: EventStatus;\n  reason?: string;\n};\n\ninterface InternalBaseTransportOptions {\n  bufferSize?: number;\n}\n\nexport interface BaseTransportOptions extends InternalBaseTransportOptions {\n  // url to send the event\n  // transport does not care about dsn specific - client should take care of\n  // parsing and figuring that out\n  url: string;\n}\n\n// TODO: Move into Browser Transport\nexport interface BrowserTransportOptions extends BaseTransportOptions {\n  // options to pass into fetch request\n  fetchParams: Record<string, string>;\n  headers?: Record<string, string>;\n  sendClientReports?: boolean;\n}\n\nexport interface NewTransport {\n  send(request: Envelope): PromiseLike<TransportResponse>;\n  flush(timeout?: number): PromiseLike<boolean>;\n}\n\nexport type TransportRequestExecutor = (request: TransportRequest) => PromiseLike<TransportMakeRequestResponse>;\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates a `NewTransport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<TransportResponse> = makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE),\n): NewTransport {\n  let rateLimits: RateLimits = {};\n\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<TransportResponse> {\n    const envCategory = getEnvelopeType(envelope);\n    const category = envCategory === 'event' ? 'error' : (envCategory as TransportCategory);\n    const request: TransportRequest = {\n      category,\n      body: serializeEnvelope(envelope),\n    };\n\n    // Don't add to buffer if transport is already rate-limited\n    if (isRateLimited(rateLimits, category)) {\n      return rejectedSyncPromise({\n        status: 'rate_limit',\n        reason: getRateLimitReason(rateLimits, category),\n      });\n    }\n\n    const requestTask = (): PromiseLike<TransportResponse> =>\n      makeRequest(request).then(({ body, headers, reason, statusCode }): PromiseLike<TransportResponse> => {\n        const status = eventStatusFromHttpCode(statusCode);\n        if (headers) {\n          rateLimits = updateRateLimits(rateLimits, headers);\n        }\n        if (status === 'success') {\n          return resolvedSyncPromise({ status, reason });\n        }\n        return rejectedSyncPromise({\n          status,\n          reason:\n            reason ||\n            body ||\n            (status === 'rate_limit' ? getRateLimitReason(rateLimits, category) : 'Unknown transport error'),\n        });\n      });\n\n    return buffer.add(requestTask);\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getRateLimitReason(rateLimits: RateLimits, category: TransportCategory): string {\n  return `Too many ${category} requests, backing off until: ${new Date(\n    disabledUntil(rateLimits, category),\n  ).toISOString()}`;\n}\n","export const SDK_VERSION = '6.19.7';\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n      const context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { Event, EventProcessor, Hub, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (processor: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (hub) {\n        const self = hub.getIntegration(InboundFilters);\n        if (self) {\n          const client = hub.getClient();\n          const clientOptions = client ? client.getOptions() : {};\n          const options = _mergeOptions(self._options, clientOptions);\n          return _shouldDropEvent(event, options) ? null : event;\n        }\n      }\n      return event;\n    });\n  }\n}\n\n/** JSDoc */\nexport function _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [\n      // eslint-disable-next-line deprecation/deprecation\n      ...(internalOptions.whitelistUrls || []),\n      ...(internalOptions.allowUrls || []),\n      // eslint-disable-next-line deprecation/deprecation\n      ...(clientOptions.whitelistUrls || []),\n      ...(clientOptions.allowUrls || []),\n    ],\n    denyUrls: [\n      // eslint-disable-next-line deprecation/deprecation\n      ...(internalOptions.blacklistUrls || []),\n      ...(internalOptions.denyUrls || []),\n      // eslint-disable-next-line deprecation/deprecation\n      ...(clientOptions.blacklistUrls || []),\n      ...(clientOptions.denyUrls || []),\n    ],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...DEFAULT_IGNORE_ERRORS,\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\n/** JSDoc */\nexport function _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    IS_DEBUG_BUILD &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message =>\n    ignoreErrors.some(pattern => isMatchingPattern(message, pattern)),\n  );\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : denyUrls.some(pattern => isMatchingPattern(url, pattern));\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : allowUrls.some(pattern => isMatchingPattern(url, pattern));\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    try {\n      const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n      return [`${value}`, `${type}: ${value}`];\n    } catch (oO) {\n      IS_DEBUG_BUILD && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    if (event.stacktrace) {\n      return _getLastValidUrl(event.stacktrace.frames);\n    }\n    let frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    IS_DEBUG_BUILD && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n","import { StackFrame } from '@sentry/types';\nimport { StackLineParser, StackLineParserFn } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    // All browser frames are considered in_app\n    in_app: true,\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex =\n  /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n","import { Event, EventHint, Exception, Severity, StackFrame } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  createStackParser,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\nimport {\n  chromeStackParser,\n  geckoStackParser,\n  opera10StackParser,\n  opera11StackParser,\n  winjsStackParser,\n} from './stack-parsers';\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromError(ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(ex: Error & { framesToPop?: number; stacktrace?: string }): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return createStackParser(\n      opera10StackParser,\n      opera11StackParser,\n      chromeStackParser,\n      winjsStackParser,\n      geckoStackParser,\n    )(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(input: string, syntheticException?: Error, attachStacktrace?: boolean): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n","/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * Debug flags need to be declared in each package individually and must not be imported across package boundaries,\n * because some build tools have trouble tree-shaking imported guards.\n *\n * As a convention, we define debug flags in a `flags.ts` file in the root of a package's `src` folder.\n *\n * Debug flag files will contain \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during\n * our, or the user's build process. Take care when introducing new flags - they must not throw if they are not\n * replaced.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n","import { forget, getGlobalObject, isNativeFetch, logger, supportsFetch } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\nconst global = getGlobalObject<Window>();\nlet cachedFetchImpl: FetchImpl;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(global.fetch)) {\n    return (cachedFetchImpl = global.fetch.bind(global));\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      IS_DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(global));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\nexport function sendReport(url: string, body: string): void {\n  const isRealNavigator = Object.prototype.toString.call(global && global.navigator) === '[object Navigator]';\n  const hasSendBeacon = isRealNavigator && typeof global.navigator.sendBeacon === 'function';\n\n  if (hasSendBeacon) {\n    // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    const sendBeacon = global.navigator.sendBeacon.bind(global.navigator);\n    return sendBeacon(url, body);\n  }\n\n  if (supportsFetch()) {\n    const fetch = getNativeFetchImplementation();\n    return forget(\n      fetch(url, {\n        body,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n      }),\n    );\n  }\n}\n","/**\n * Consumes the promise and logs the error when it rejects.\n * @param promise A promise to forget.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function forget(promise: PromiseLike<any>): void {\n  void promise.then(null, e => {\n    // TODO: Use a better logging mechanism\n    // eslint-disable-next-line no-console\n    console.error(e);\n  });\n}\n","import {\n  APIDetails,\n  eventToSentryRequest,\n  getEnvelopeEndpointWithUrlEncodedAuth,\n  getStoreEndpointWithUrlEncodedAuth,\n  initAPIDetails,\n  sessionToSentryRequest,\n} from '@sentry/core';\nimport {\n  ClientReport,\n  Event,\n  Outcome,\n  Response as SentryResponse,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport {\n  createClientReportEnvelope,\n  disabledUntil,\n  dsnToString,\n  eventStatusFromHttpCode,\n  getGlobalObject,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  PromiseBuffer,\n  RateLimits,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { sendReport } from './utils';\n\nfunction requestTypeToCategory(ty: SentryRequestType): string {\n  const tyStr = ty as string;\n  return tyStr === 'event' ? 'error' : tyStr;\n}\n\nconst global = getGlobalObject<Window>();\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: APIDetails;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<SentryResponse> = makePromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected _rateLimits: RateLimits = {};\n\n  protected _outcomes: { [key: string]: number } = {};\n\n  public constructor(public options: TransportOptions) {\n    this._api = initAPIDetails(options.dsn, options._metadata, options.tunnel);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = getStoreEndpointWithUrlEncodedAuth(this._api.dsn);\n\n    if (this.options.sendClientReports && global.document) {\n      global.document.addEventListener('visibilitychange', () => {\n        if (global.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<SentryResponse> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<SentryResponse> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordLostEvent(reason: Outcome, category: SentryRequestType): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n    // We want to track each category (event, transaction, session) separately\n    // but still keep the distinction between different type of outcomes.\n    // We could use nested maps, but it's much easier to read and type this way.\n    // A correct type for map-based implementation if we want to go that route\n    // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n    const key = `${requestTypeToCategory(category)}:${reason}`;\n    IS_DEBUG_BUILD && logger.log(`Adding outcome: ${key}`);\n    this._outcomes[key] = (this._outcomes[key] ?? 0) + 1;\n  }\n\n  /**\n   * Send outcomes as an envelope\n   */\n  protected _flushOutcomes(): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n\n    // Nothing to send\n    if (!Object.keys(outcomes).length) {\n      IS_DEBUG_BUILD && logger.log('No outcomes to flush');\n      return;\n    }\n\n    IS_DEBUG_BUILD && logger.log(`Flushing outcomes:\\n${JSON.stringify(outcomes, null, 2)}`);\n\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(this._api.dsn, this._api.tunnel);\n\n    const discardedEvents = Object.keys(outcomes).map(key => {\n      const [category, reason] = key.split(':');\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n      // TODO: Improve types on discarded_events to get rid of cast\n    }) as ClientReport['discarded_events'];\n    const envelope = createClientReportEnvelope(discardedEvents, this._api.tunnel && dsnToString(this._api.dsn));\n\n    try {\n      sendReport(url, serializeEnvelope(envelope));\n    } catch (e) {\n      IS_DEBUG_BUILD && logger.error(e);\n    }\n  }\n\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  protected _handleResponse({\n    requestType,\n    response,\n    headers,\n    resolve,\n    reject,\n  }: {\n    requestType: SentryRequestType;\n    response: Response | XMLHttpRequest;\n    headers: Record<string, string | null>;\n    resolve: (value?: SentryResponse | PromiseLike<SentryResponse> | null | undefined) => void;\n    reject: (reason?: unknown) => void;\n  }): void {\n    const status = eventStatusFromHttpCode(response.status);\n\n    this._rateLimits = updateRateLimits(this._rateLimits, headers);\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(requestType)) {\n      IS_DEBUG_BUILD &&\n        // eslint-disable-next-line deprecation/deprecation\n        logger.warn(`Too many ${requestType} requests, backing off until: ${this._disabledUntil(requestType)}`);\n    }\n\n    if (status === 'success') {\n      resolve({ status });\n      return;\n    }\n\n    reject(response);\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   *\n   * @deprecated Please use `disabledUntil` from @sentry/utils\n   */\n  protected _disabledUntil(requestType: SentryRequestType): Date {\n    const category = requestTypeToCategory(requestType);\n    return new Date(disabledUntil(this._rateLimits, category));\n  }\n\n  /**\n   * Checks if a category is rate limited\n   *\n   * @deprecated Please use `isRateLimited` from @sentry/utils\n   */\n  protected _isRateLimited(requestType: SentryRequestType): boolean {\n    const category = requestTypeToCategory(requestType);\n    return isRateLimited(this._rateLimits, category);\n  }\n\n  protected abstract _sendRequest(\n    sentryRequest: SentryRequest,\n    originalPayload: Event | Session,\n  ): PromiseLike<SentryResponse>;\n}\n","import { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","import { Event, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  public constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  protected _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n      // (see https://caniuse.com/#feat=referrer-policy),\n      // it doesn't. And it throws an exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            void this._fetch(sentryRequest.url, options)\n              .then(response => {\n                const headers = {\n                  'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n                  'retry-after': response.headers.get('Retry-After'),\n                };\n                this._handleResponse({\n                  requestType: sentryRequest.type,\n                  response,\n                  headers,\n                  resolve,\n                  reject,\n                });\n              })\n              .catch(reject);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent('queue_overflow', sentryRequest.type);\n        } else {\n          this.recordLostEvent('network_error', sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n","import { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { SentryError, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  protected _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            const request = new XMLHttpRequest();\n\n            request.onreadystatechange = (): void => {\n              if (request.readyState === 4) {\n                const headers = {\n                  'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n                  'retry-after': request.getResponseHeader('Retry-After'),\n                };\n                this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n              }\n            };\n\n            request.open('POST', sentryRequest.url);\n            for (const header in this.options.headers) {\n              if (Object.prototype.hasOwnProperty.call(this.options.headers, header)) {\n                request.setRequestHeader(header, this.options.headers[header]);\n              }\n            }\n            request.send(sentryRequest.body);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent('queue_overflow', sentryRequest.type);\n        } else {\n          this.recordLostEvent('network_error', sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n","import {\n  BaseTransportOptions,\n  createTransport,\n  NewTransport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n} from '@sentry/core';\n\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\nexport interface FetchTransportOptions extends BaseTransportOptions {\n  requestOptions?: RequestInit;\n}\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeNewFetchTransport(\n  options: FetchTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): NewTransport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      ...options.requestOptions,\n    };\n\n    return nativeFetch(options.url, requestOptions).then(response => {\n      return response.text().then(body => ({\n        body,\n        headers: {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After'),\n        },\n        reason: response.statusText,\n        statusCode: response.status,\n      }));\n    });\n  }\n\n  return createTransport({ bufferSize: options.bufferSize }, makeRequest);\n}\n","import {\n  BaseTransportOptions,\n  createTransport,\n  NewTransport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n} from '@sentry/core';\nimport { SyncPromise } from '@sentry/utils';\n\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\nconst XHR_READYSTATE_DONE = 4;\n\nexport interface XHRTransportOptions extends BaseTransportOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\nexport function makeNewXHRTransport(options: XHRTransportOptions): NewTransport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    return new SyncPromise<TransportMakeRequestResponse>((resolve, _reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = (): void => {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          const response = {\n            body: xhr.response,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After'),\n            },\n            reason: xhr.statusText,\n            statusCode: xhr.status,\n          };\n          resolve(response);\n        }\n      };\n\n      xhr.open('POST', options.url);\n\n      for (const header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n\n      xhr.send(request.body);\n    });\n  }\n\n  return createTransport({ bufferSize: options.bufferSize }, makeRequest);\n}\n","import { BaseBackend, getEnvelopeEndpointWithUrlEncodedAuth, initAPIDetails } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport, TransportOptions } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, makeNewFetchTransport, makeNewXHRTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(exception, hint, this._options.attachStacktrace);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions: TransportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      tunnel: this._options.tunnel,\n      sendClientReports: this._options.sendClientReports,\n      _metadata: this._options._metadata,\n    };\n\n    const api = initAPIDetails(transportOptions.dsn, transportOptions._metadata, transportOptions.tunnel);\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel);\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      const requestOptions: RequestInit = { ...transportOptions.fetchParameters };\n      this._newTransport = makeNewFetchTransport({ requestOptions, url });\n      return new FetchTransport(transportOptions);\n    }\n\n    this._newTransport = makeNewXHRTransport({\n      url,\n      headers: transportOptions.headers,\n    });\n    return new XHRTransport(transportOptions);\n  }\n}\n","import { Event, EventHint, Options, Session, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { initAPIDetails } from './api';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { createEventEnvelope, createSessionEnvelope } from './request';\nimport { NewTransport } from './transports/base';\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instantiate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates an {@link Event} from primitive inputs to `captureMessage`. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /** Submits the session to Sentry */\n  sendSession(session: Session): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instantiate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** New v7 Transport that is initialized alongside the old one */\n  protected _newTransport?: NewTransport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      IS_DEBUG_BUILD && logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    // TODO(v7): Remove the if-else\n    if (\n      this._newTransport &&\n      this._options.dsn &&\n      this._options._experiments &&\n      this._options._experiments.newTransport\n    ) {\n      const api = initAPIDetails(this._options.dsn, this._options._metadata, this._options.tunnel);\n      const env = createEventEnvelope(event, api);\n      void this._newTransport.send(env).then(null, reason => {\n        IS_DEBUG_BUILD && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      void this._transport.sendEvent(event).then(null, reason => {\n        IS_DEBUG_BUILD && logger.error('Error while sending event:', reason);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): void {\n    if (!this._transport.sendSession) {\n      IS_DEBUG_BUILD && logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    // TODO(v7): Remove the if-else\n    if (\n      this._newTransport &&\n      this._options.dsn &&\n      this._options._experiments &&\n      this._options._experiments.newTransport\n    ) {\n      const api = initAPIDetails(this._options.dsn, this._options._metadata, this._options.tunnel);\n      const [env] = createSessionEnvelope(session, api);\n      void this._newTransport.send(env).then(null, reason => {\n        IS_DEBUG_BUILD && logger.error('Error while sending session:', reason);\n      });\n    } else {\n      void this._transport.sendSession(session).then(null, reason => {\n        IS_DEBUG_BUILD && logger.error('Error while sending session:', reason);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n","import { captureException, getReportDialogEndpoint, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getGlobalObject,\n  getOriginalFunction,\n  logger,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\nconst global = getGlobalObject<Window>();\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function (this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!global.document) {\n    return;\n  }\n\n  if (!options.eventId) {\n    IS_DEBUG_BUILD && logger.error('Missing eventId option in showReportDialog call');\n    return;\n  }\n\n  if (!options.dsn) {\n    IS_DEBUG_BUILD && logger.error('Missing dsn option in showReportDialog call');\n    return;\n  }\n\n  const script = global.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(options.dsn, options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = global.document.head || global.document.body;\n\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(error, undefined, attachStacktrace, true);\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  IS_DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndAttachStacktrace(): [Hub, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject, getOriginalFunction } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', _wrapTimeFunction);\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', _wrapTimeFunction);\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', _wrapRAF);\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n    }\n\n    const eventTargetOption = this._options.eventTarget;\n    if (eventTargetOption) {\n      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(_wrapEventTarget);\n    }\n  }\n}\n\n/** JSDoc */\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: true,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: true,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const global = getGlobalObject() as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = global[target] && global[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: () => void): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityFromString,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  const global = getGlobalObject<Window>();\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(global.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(key: string, limit: number, event: Event, hint?: EventHint): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(limit: number, error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(error[key]);\n  return _walkErrorTree(limit, error[key], key, [exception, ...stack]);\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (global.location && global.location.href);\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((currentEvent: Event) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            IS_DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  } else if (event.stacktrace) {\n    return event.stacktrace.frames;\n  }\n  return undefined;\n}\n","import { BaseClient, Scope, SDK_VERSION } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      IS_DEBUG_BUILD && logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { Hub } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger, resolvedSyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n  const client = hub.getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  IS_DEBUG_BUILD && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  IS_DEBUG_BUILD && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    IS_DEBUG_BUILD && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, Transaction } from '@sentry/types';\n\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * TODO(v7): Reorganize these exports\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n */\nexport { TRACEPARENT_REGEXP, extractTraceparentData } from '@sentry/utils';\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(maybeOptions?: Options | undefined): boolean {\n  const client = getCurrentHub().getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  const hub = maybeHub || getCurrentHub();\n  const scope = hub.getScope();\n  return scope && (scope.getTransaction() as T | undefined);\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n","import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    IS_DEBUG_BUILD && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n","// Store finish reasons in tuple to save on bundle size\n// Readonly type should enforce that this is not mutated.\nexport const FINISH_REASON_TAG = 'finishReason';\n\nexport const IDLE_TRANSACTION_FINISH_REASONS = ['heartbeatFailed', 'idleTimeout', 'documentHidden'] as const;\n","/* eslint-disable max-lines */\nimport { Primitive, Span as SpanInterface, SpanContext, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatusType | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: Primitive } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  public child(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    return this.startChild(spanContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    this.data = spanContext.data ?? {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId ?? this.spanId;\n    this.startTimestamp = spanContext.startTimestamp ?? this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags ?? {};\n    this.traceId = spanContext.traceId ?? this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport {\n  Event,\n  Measurements,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, isInstanceOf, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public name: string;\n\n  public metadata: TransactionMetadata;\n\n  private _measurements: Measurements = {};\n\n  /**\n   * The reference to the current hub.\n   */\n  private readonly _hub: Hub = getCurrentHub() as unknown as Hub;\n\n  private _trimEnd?: boolean;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    if (isInstanceOf(hub, Hub)) {\n      this._hub = hub as Hub;\n    }\n\n    this.name = transactionContext.name || '';\n\n    this.metadata = transactionContext.metadata || {};\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string): void {\n    this.name = name;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set observed measurements for this transaction.\n   * @hidden\n   */\n  public setMeasurements(measurements: Measurements): void {\n    this._measurements = { ...measurements };\n  }\n\n  /**\n   * Set metadata for this transaction.\n   * @hidden\n   */\n  public setMetadata(newMetadata: TransactionMetadata): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      IS_DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      IS_DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      const client = this._hub.getClient();\n      const transport = client && client.getTransport && client.getTransport();\n      if (transport && transport.recordLostEvent) {\n        transport.recordLostEvent('sample_rate', 'transaction');\n      }\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const transaction: Event = {\n      contexts: {\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: this.metadata,\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      IS_DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    IS_DEBUG_BUILD && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name ?? '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n}\n","import { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\n\nimport { FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS } from './constants';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { Span, SpanRecorder } from './span';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\nexport const HEARTBEAT_INTERVAL = 5000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string = '',\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  /**\n   * If a transaction is created and no activities are added, we want to make sure that\n   * it times out properly. This is cleared and not used when activities are added.\n   */\n  private _initTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub?: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished.\n     * @default 1000\n     */\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      IS_DEBUG_BUILD && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n\n    this._initTimeout = setTimeout(() => {\n      if (!this._finished) {\n        this.finish();\n      }\n    }, this._idleTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      IS_DEBUG_BUILD &&\n        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus('cancelled');\n          IS_DEBUG_BUILD &&\n            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          IS_DEBUG_BUILD &&\n            logger.log(\n              '[Tracing] discarding Span since it happened after Transaction was finished',\n              JSON.stringify(span, undefined, 2),\n            );\n        }\n        return keepSpan;\n      });\n\n      IS_DEBUG_BUILD && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      IS_DEBUG_BUILD && logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      IS_DEBUG_BUILD && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    IS_DEBUG_BUILD && logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    IS_DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      IS_DEBUG_BUILD && logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      IS_DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const end = timestampWithMs() + timeout / 1000;\n\n      setTimeout(() => {\n        if (!this._finished) {\n          this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[1]);\n          this.finish(end);\n        }\n      }, timeout);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      IS_DEBUG_BUILD && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n      this.setStatus('deadline_exceeded');\n      this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[0]);\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    IS_DEBUG_BUILD && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, HEARTBEAT_INTERVAL);\n  }\n}\n\n/**\n * Reset transaction on scope to `undefined`\n */\nfunction clearActiveTransaction(hub?: Hub): void {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      const transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}\n","import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n} from '@sentry/types';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(transaction: T, options: Options, samplingContext: SamplingContext): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: 'explicitly_set' },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: 'inheritance' },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    IS_DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    IS_DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    IS_DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  IS_DEBUG_BUILD && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    IS_DEBUG_BUILD &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n","import { getGlobalObject, logger } from '@sentry/utils';\n\nimport { FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS } from '../constants';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { IdleTransaction } from '../idletransaction';\nimport { SpanStatusType } from '../span';\nimport { getActiveTransaction } from '../utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (global && global.document) {\n    global.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (global.document.hidden && activeTransaction) {\n        const statusType: SpanStatusType = 'cancelled';\n\n        IS_DEBUG_BUILD &&\n          logger.log(\n            `[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`,\n          );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[2]);\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    IS_DEBUG_BUILD && logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric, ReportHandler } from '../types';\n\nexport const bindReporter = (\n  callback: ReportHandler,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        metric.delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (metric.delta || prevValue === undefined) {\n          prevValue = metric.value;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\n\nexport const initMetric = (name: Metric['name'], value?: number): Metric => {\n  return {\n    name,\n    value: value ?? -1,\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `v2-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type: string, callback: PerformanceEntryHandler): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      // More extensive feature detect needed for Firefox due to:\n      // https://github.com/GoogleChrome/web-vitals/issues/142\n      if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n        return;\n      }\n\n      const po: PerformanceObserver = new PerformanceObserver(l => l.getEntries().map(callback));\n\n      po.observe({ type, buffered: true });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\nexport const onHidden = (cb: OnHiddenCallback, once?: boolean): void => {\n  const onHiddenOrPageHide = (event: Event): void => {\n    if (event.type === 'pagehide' || getGlobalObject<Window>().document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  return getGlobalObject<Window>().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Measurements, SpanContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, htmlTreeAsString, isNodeEnv, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { Span } from '../span';\nimport { Transaction } from '../transaction';\nimport { msToSec } from '../utils';\nimport { getCLS, LayoutShift } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP, LargestContentfulPaint } from './web-vitals/getLCP';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from './web-vitals/types';\n\nconst global = getGlobalObject<Window>();\n\n/** Class tracking metrics  */\nexport class MetricsInstrumentation {\n  private _measurements: Measurements = {};\n\n  private _performanceCursor: number = 0;\n  private _lcpEntry: LargestContentfulPaint | undefined;\n  private _clsEntry: LayoutShift | undefined;\n\n  public constructor(private _reportAllChanges: boolean = false) {\n    if (!isNodeEnv() && global && global.performance && global.document) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n    }\n  }\n\n  /** Add performance related spans to a transaction */\n  public addPerformanceEntries(transaction: Transaction): void {\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    IS_DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n    let responseStartTimestamp: number | undefined;\n    let requestStartTimestamp: number | undefined;\n\n    global.performance\n      .getEntries()\n      .slice(this._performanceCursor)\n      .forEach((entry: Record<string, any>) => {\n        const startTime = msToSec(entry.startTime as number);\n        const duration = msToSec(entry.duration as number);\n\n        if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n          return;\n        }\n\n        switch (entry.entryType) {\n          case 'navigation': {\n            addNavigationSpans(transaction, entry, timeOrigin);\n            responseStartTimestamp = timeOrigin + msToSec(entry.responseStart as number);\n            requestStartTimestamp = timeOrigin + msToSec(entry.requestStart as number);\n            break;\n          }\n          case 'mark':\n          case 'paint':\n          case 'measure': {\n            const startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            // capture web vitals\n\n            const firstHidden = getVisibilityWatcher();\n            // Only report if the page wasn't hidden prior to the web vital.\n            const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n            if (entry.name === 'first-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n              this._measurements['fp'] = { value: entry.startTime };\n              this._measurements['mark.fp'] = { value: startTimestamp };\n            }\n\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n              this._measurements['fcp'] = { value: entry.startTime };\n              this._measurements['mark.fcp'] = { value: startTimestamp };\n            }\n\n            break;\n          }\n          case 'resource': {\n            const resourceName = (entry.name as string).replace(global.location.origin, '');\n            addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            break;\n          }\n          default:\n          // Ignore other entry types.\n        }\n      });\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n\n    this._trackNavigator(transaction);\n\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n      // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n      // start of the response in milliseconds\n      if (typeof responseStartTimestamp === 'number') {\n        IS_DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n        this._measurements['ttfb'] = { value: (responseStartTimestamp - transaction.startTimestamp) * 1000 };\n\n        if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n          // Capture the time spent making the request and receiving the first byte of the response.\n          // This is the time between the start of the request and the start of the response in milliseconds.\n          this._measurements['ttfb.requestTime'] = { value: (responseStartTimestamp - requestStartTimestamp) * 1000 };\n        }\n      }\n\n      ['fcp', 'fp', 'lcp'].forEach(name => {\n        if (!this._measurements[name] || timeOrigin >= transaction.startTimestamp) {\n          return;\n        }\n\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n\n        const oldValue = this._measurements[name].value;\n        const measurementTimestamp = timeOrigin + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n\n        const delta = normalizedValue - oldValue;\n        IS_DEBUG_BUILD &&\n          logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n\n        this._measurements[name].value = normalizedValue;\n      });\n\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value,\n        });\n      }\n\n      // If FCP is not recorded we should not record the cls value\n      // according to the new definition of CLS.\n      if (!('fcp' in this._measurements)) {\n        delete this._measurements.cls;\n      }\n\n      transaction.setMeasurements(this._measurements);\n      tagMetricInfo(transaction, this._lcpEntry, this._clsEntry);\n      transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);\n    }\n  }\n\n  /**\n   * Capture the information of the user agent.\n   */\n  private _trackNavigator(transaction: Transaction): void {\n    const navigator = global.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n    if (!navigator) {\n      return;\n    }\n\n    // track network connectivity\n    const connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = { value: connection.rtt as number };\n      }\n\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = { value: connection.downlink as number };\n      }\n    }\n\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  }\n\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  private _trackCLS(): void {\n    // See:\n    // https://web.dev/evolving-cls/\n    // https://web.dev/cls-web-tooling/\n    getCLS(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n      this._measurements['cls'] = { value: metric.value };\n      this._clsEntry = entry as LayoutShift;\n    });\n  }\n\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  private _trackLCP(): void {\n    getLCP(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n      this._measurements['lcp'] = { value: metric.value };\n      this._measurements['mark.lcp'] = { value: timeOrigin + startTime };\n      this._lcpEntry = entry as LargestContentfulPaint;\n    }, this._reportAllChanges);\n  }\n\n  /** Starts tracking the First Input Delay on the current page. */\n  private _trackFID(): void {\n    getFID(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n      this._measurements['fid'] = { value: metric.value };\n      this._measurements['mark.fid'] = { value: timeOrigin + startTime };\n    });\n  }\n}\n\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create measure related spans */\nfunction addMeasureSpans(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource-related spans */\nexport function addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n}\n\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description ?? event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\nfunction addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value: any): boolean {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction tagMetricInfo(\n  transaction: Transaction,\n  lcpEntry: MetricsInstrumentation['_lcpEntry'],\n  clsEntry: MetricsInstrumentation['_clsEntry'],\n): void {\n  if (lcpEntry) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(lcpEntry.element));\n    }\n\n    if (lcpEntry.id) {\n      transaction.setTag('lcp.id', lcpEntry.id);\n    }\n\n    if (lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (clsEntry && clsEntry.sources) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\nexport interface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources: Array<LayoutShiftAttribution>;\n  toJSON(): Record<string, unknown>;\n}\n\nexport interface LayoutShiftAttribution {\n  node?: Node;\n  previousRect: DOMRectReadOnly;\n  currentRect: DOMRectReadOnly;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (\n        sessionValue &&\n        sessionEntries.length !== 0 &&\n        entry.startTime - lastSessionEntry.startTime < 1000 &&\n        entry.startTime - firstSessionEntry.startTime < 5000\n      ) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      report(true);\n    });\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { PerformanceEventTiming, ReportHandler } from './types';\n\nexport const getFID = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const po = observe('first-input', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n","import { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: FetchData) => {\n      fetchCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      xhrCallback(handlerData, shouldCreateSpan, spans);\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    let headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = (request as Request).headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = [...headers, ['sentry-trace', span.toTraceparent()]];\n      } else {\n        headers = { ...headers, 'sentry-trace': span.toTraceparent() };\n      }\n    } else {\n      headers = { 'sentry-trace': span.toTraceparent() };\n    }\n    options.headers = headers;\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (\n    !hasTracingEnabled() ||\n    (handlerData.xhr && handlerData.xhr.__sentry_own_request__) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n","import { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    IS_DEBUG_BUILD && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'pageload' });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }: { to: string; from?: string }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          IS_DEBUG_BUILD && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'navigation' });\n      }\n    });\n  }\n}\n","import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  instrumentOutgoingRequests,\n  RequestInstrumentationOptions,\n} from './request';\nimport { instrumentRoutingWithDefaults } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{ _reportAllChanges: boolean }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation;\n\n  private readonly _emitOptionsWarning?: boolean;\n\n  /** Store configured idle timeout so that it can be added as a tag to transactions */\n  private _configuredIdleTimeout: BrowserTracingOptions['idleTimeout'] | undefined = undefined;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      this._configuredIdleTimeout = _options.idleTimeout;\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        IS_DEBUG_BUILD && (this._emitOptionsWarning = true);\n      }\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n\n    const { _metricOptions } = this.options;\n    this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      IS_DEBUG_BUILD &&\n        logger.warn(\n          '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n        );\n      IS_DEBUG_BUILD &&\n        logger.warn(\n          `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      IS_DEBUG_BUILD &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      IS_DEBUG_BUILD && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    IS_DEBUG_BUILD && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = getGlobalObject() as WindowOrWorkerGlobalScope & { location: Location };\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n    );\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = getGlobalObject<Window>().document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus('deadline_exceeded');\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n","export {\n  Breadcrumb,\n  Request,\n  SdkInfo,\n  Event,\n  EventStatus,\n  Exception,\n  Response,\n  Severity,\n  StackFrame,\n  Stacktrace,\n  Thread,\n  User,\n} from '@sentry/types';\n\nexport { SeverityLevel } from '@sentry/utils';\n\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  Scope,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  startTransaction,\n  Transports,\n  withScope,\n} from '@sentry/browser';\n\nexport { BrowserOptions } from '@sentry/browser';\nexport { BrowserClient, ReportDialogOptions } from '@sentry/browser';\nexport {\n  defaultIntegrations,\n  forceLoad,\n  init,\n  lastEventId,\n  onLoad,\n  showReportDialog,\n  flush,\n  close,\n  wrap,\n} from '@sentry/browser';\nexport { SDK_NAME, SDK_VERSION } from '@sentry/browser';\n\nimport { Integrations as BrowserIntegrations } from '@sentry/browser';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { BrowserTracing } from './browser';\nimport { addExtensionMethods } from './hubextensions';\n\nexport { Span } from './span';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...BrowserIntegrations,\n  BrowserTracing,\n};\n\nexport { INTEGRATIONS as Integrations };\n// Though in this case exporting this separately in addition to exporting it as part of `Sentry.Integrations` doesn't\n// gain us any bundle size advantage (we're making the bundle here, not the user, and we can't leave anything out of\n// ours), it does bring the API for using the integration in line with that recommended for users bundling Sentry\n// themselves.\nexport { BrowserTracing };\n\n// We are patching the global object with our hub extension methods\naddExtensionMethods();\n\nexport { addExtensionMethods };\n","// TODO: Remove in the next major release and rely only on @sentry/core SDK_VERSION and SdkInfo metadata\nexport const SDK_NAME = 'sentry.javascript.browser';\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    if (IS_DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"names":["Severity","fallbackGlobalObject","getGlobalObject","window","self","getGlobalSingleton","name","creator","obj","global","__SENTRY__","objectToString","Object","prototype","toString","isError","wat","call","isInstanceOf","Error","isBuiltin","ty","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isThenable","Boolean","then","isNaN","base","_e","htmlTreeAsString","elem","keyAttrs","currentElem","MAX_TRAVERSE_HEIGHT","MAX_OUTPUT_LEN","out","height","len","separator","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","id","split","allowedAttrs","setPrototypeOf","__proto__","Array","proto","prop","hasOwnProperty","SentryError","constructor","message","super","this","DSN_REGEX","dsnToString","dsn","withPassword","host","path","pass","port","projectId","protocol","publicKey","dsnFromComponents","components","user","makeDsn","from","str","match","exec","lastPath","slice","pop","projectMatch","dsnFromString","component","isValidProtocol","parseInt","validateDsn","SeverityLevels","CONSOLE_LEVELS","consoleSandbox","callback","originalConsole","console","wrappedLevels","level","originalWrappedFunc","__sentry_original__","keys","makeLogger","enabled","logger","enable","disable","args","truncate","max","substr","safeJoin","input","delimiter","isArray","output","value","String","e","isMatchingPattern","pattern","test","indexOf","fill","source","replacementFactory","original","wrapped","markFunctionWrapped","_Oo","addNonEnumerableProperty","defineProperty","writable","configurable","getOriginalFunction","func","convertToPlainObject","newObj","stack","getOwnProperties","event","type","target","serializeEventTarget","currentTarget","CustomEvent","detail","Element","extractedProps","property","extractExceptionKeysForMessage","exception","maxLength","sort","includedKeys","serialized","dropUndefinedKeys","val","rv","createStackParser","parsers","sortedParsers","a","b","p","skipFirst","frames","line","parser","frame","localStack","firstFrameFunction","function","lastFrameFunction","filename","stripSentryFramesAndReverse","defaultFunctionName","getFunctionName","fn","supportsFetch","Headers","Request","Response","isNativeFetch","supportsReferrerPolicy","referrerPolicy","handlers","instrumented","instrument","originalConsoleMethod","triggerHandlers","apply","instrumentConsole","triggerDOMHandler","bind","globalDOMEventHandler","makeDOMEventHandler","document","addEventListener","originalAddEventListener","listener","options","__sentry_instrumentation_handlers__","handlerForType","refCount","handler","originalRemoveEventListener","undefined","instrumentDOM","xhrproto","XMLHttpRequest","originalOpen","xhr","url","xhrInfo","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","endTimestamp","Date","now","startTimestamp","onreadystatechange","readyStateArgs","originalSend","body","instrumentXHR","fetch","result","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","err","warn","supportsNativeFetch","originalFetch","handlerData","fetchData","getFetchMethod","getFetchUrl","response","error","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","lastHref","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","column","arguments","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","data","fetchArgs","debounceTimerID","lastCapturedEvent","globalListener","isContentEditable","shouldSkipDOMEvent","previous","current","shouldShortcircuitPreviousDebounce","clearTimeout","setTimeout","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","replace","c","r","Math","random","parseUrl","query","fragment","relative","getFirstException","values","getEventDescription","event_id","eventId","firstException","addExceptionTypeValue","addExceptionMechanism","newMechanism","currentMechanism","mechanism","handled","mergedData","checkOrSetAlreadyCaught","__sentry_captured__","normalize","depth","Infinity","maxProperties","visit","ERROR","normalizeToSize","object","maxSize","normalized","encodeURI","utf8Length","JSON","stringify","memo","hasWeakSet","WeakSet","inner","has","add","delete","splice","memoBuilder","memoize","unmemoize","valueWithToJSON","toJSON","includes","stringified","_events","getPrototypeOf","stringifyValue","startsWith","numAdded","visitable","visitKey","visitValue","resolvedSyncPromise","SyncPromise","resolve","rejectedSyncPromise","reason","_","reject","executor","_setResult","state","_state","_resolve","_reject","_value","_executeHandlers","cachedHandlers","_handlers","onfulfilled","onrejected","catch","finally","onfinally","isRejected","makePromiseBuffer","limit","buffer","remove","task","$","taskProducer","drain","timeout","counter","capturedSetTimeout","item","severityFromString","Warning","isSupportedSeverity","Log","eventStatusFromHttpCode","code","dateTimestampSource","nowSeconds","platformPerformance","performance","timeOrigin","getBrowserPerformance","timestampSource","dateTimestampInSeconds","timestampInSeconds","timestampWithMs","browserPerformanceTimeOrigin","threshold","performanceNow","dateNow","timeOriginDelta","abs","timeOriginIsReliable","navigationStart","timing","navigationStartDelta","TRACEPARENT_REGEXP","RegExp","createEnvelope","headers","items","serializeEnvelope","envelope","serializedHeaders","reduce","acc","itemHeaders","payload","serializedPayload","disabledUntil","limits","category","all","isRateLimited","updateRateLimits","updatedRateLimits","rateLimitHeader","retryAfterHeader","trim","parameters","headerDelay","delay","header","headerDate","parse","parseRetryAfterHeader","Scope","static","scope","newScope","_breadcrumbs","_tags","_extra","_contexts","_user","_level","_span","_session","_transactionName","_fingerprint","_eventProcessors","_requestSession","addScopeListener","_scopeListeners","addEventProcessor","setUser","update","_notifyScopeListeners","getUser","getRequestSession","setRequestSession","requestSession","setTags","tags","setTag","setExtras","extras","setExtra","extra","setFingerprint","fingerprint","setLevel","setTransactionName","setTransaction","setContext","context","setSpan","span","getSpan","getTransaction","transaction","setSession","session","getSession","captureContext","updatedScope","contexts","clear","addBreadcrumb","breadcrumb","maxBreadcrumbs","maxCrumbs","min","mergedBreadcrumb","timestamp","clearBreadcrumbs","applyToEvent","hint","trace","getTraceContext","transactionName","_applyFingerprint","breadcrumbs","sdkProcessingMetadata","_sdkProcessingMetadata","_notifyEventProcessors","getGlobalEventProcessors","setSDKProcessingMetadata","newData","processors","index","processor","final","_notifyingListeners","concat","addGlobalEventProcessor","Session","startingTime","started","ipAddress","ip_address","did","email","username","ignoreDuration","sid","init","duration","release","environment","userAgent","errors","close","toISOString","attrs","user_agent","DEFAULT_BREADCRUMBS","Hub","client","_version","getStackTop","bindClient","isOlderThan","version","setupIntegrations","pushScope","clone","getScope","getStack","getClient","popScope","withScope","_stack","captureException","_lastEventId","finalHint","syntheticException","originalException","_invokeClient","captureMessage","captureEvent","lastEventId","beforeBreadcrumb","getOptions","finalBreadcrumb","configureScope","run","oldHub","makeMain","getIntegration","integration","startSpan","_callExtensionMethod","startTransaction","customSamplingContext","traceHeaders","captureSession","endSession","_sendSessionUpdate","layer","startSession","navigator","currentSession","sentry","getMainCarrier","extensions","carrier","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","callOnHub","initAPIDetails","metadata","tunnel","initDsn","getBaseApiEndpoint","_getIngestEndpoint","_encodedAuth","sentry_key","sentry_version","encodeURIComponent","getStoreEndpointWithUrlEncodedAuth","getStoreEndpoint","getEnvelopeEndpointWithUrlEncodedAuth","_getEnvelopeEndpoint","installedIntegrations","filterDuplicates","integrations","every","accIntegration","defaultIntegrations","userIntegrations","userIntegration","integrationsNames","alwaysLastToRun","getIntegrationsToSetup","setupOnce","log","setupIntegration","ALREADY_SEEN_ERROR","getSdkMetadataForEnvelopeHeader","api","sdk","enhanceEventWithSdkInfo","sdkInfo","packages","createSessionEnvelope","sent_at","NoopTransport","sendEvent","createTransport","makeRequest","bufferSize","rateLimits","send","envCategory","firstItemHeader","getEnvelopeType","request","getRateLimitReason","statusCode","flush","SDK_VERSION","originalFunctionToString","FunctionToString","Function","DEFAULT_IGNORE_ERRORS","InboundFilters","_options","clientOptions","internalOptions","allowUrls","whitelistUrls","denyUrls","blacklistUrls","ignoreErrors","ignoreInternal","_mergeOptions","_isSentryError","oO","_getPossibleEventMessages","some","_isIgnoredError","_getEventFilterUrl","_isDeniedUrl","_isAllowedUrl","_shouldDropEvent","_getLastValidUrl","stacktrace","UNKNOWN_FUNCTION","createFrame","lineno","colno","in_app","chromeRegex","chromeEvalRegex","chromeStackParser","parts","subMatch","extractSafariExtensionDetails","geckoREgex","geckoEvalRegex","geckoStackParser","winjsRegex","winjsStackParser","opera10Regex","opera10StackParser","opera11Regex","opera11StackParser","isSafariExtension","isSafariWebExtension","exceptionFromError","ex","parseStackFrames","extractMessage","eventFromError","popSize","framesToPop","reactMinifiedRegexp","getPopSize","eventFromUnknownInput","attachStacktrace","isUnhandledRejection","domException","eventFromString","__serialized__","eventFromPlainObject","synthetic","cachedFetchImpl","getNativeFetchImplementation","fetchImpl","sendReport","sendBeacon","credentials","keepalive","requestTypeToCategory","BaseTransport","_api","_metadata","sendClientReports","visibilityState","_flushOutcomes","_sendRequest","eventType","useEnvelope","transactionSampling","samplingMethod","rate","sampleRate","baseClientNormalized","skippedNormalization","normalizeDepth","JSONStringifyError","newErr","innerErr","req","sample_rates","eventToSentryRequest","sendSession","sessionToSentryRequest","_buffer","recordLostEvent","_outcomes","outcomes","discardedEvents","quantity","discarded_events","_handleResponse","requestType","_rateLimits","_isRateLimited","_disabledUntil","FetchTransport","_fetch","sentryRequest","originalPayload","Promise","fetchParameters","assign","get","XHRTransport","getResponseHeader","open","setRequestHeader","makeNewFetchTransport","nativeFetch","requestOptions","text","statusText","makeNewXHRTransport","BrowserBackend","_transport","_setupTransport","eventFromException","_exception","_hint","eventFromMessage","_message","_newTransport","_experiments","newTransport","env","createEventEnvelope","getTransport","Info","transportOptions","transport","ignoreOnError","shouldIgnoreOnError","ignoreNextOnError","wrap","before","wrapper","__sentry_wrapped__","sentryWrapped","wrappedArguments","arg","getOwnPropertyDescriptor","injectReportDialog","script","async","src","dsnLike","dialogOptions","endpoint","encodedOptions","getReportDialogEndpoint","onLoad","onload","injectionPoint","GlobalHandlers","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","stackTraceLimit","installFunc","_installFunc","getHubAndAttachStacktrace","ERROR_TYPES_RE","groups","_enhanceEventWithInitialFrame","_eventFromIncompleteOnError","addMechanismAndCapture","ev","ev0","ev0s","ev0sf","getLocationHref","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","setInterval","_wrapTimeFunction","_wrapRAF","_wrapXHR","eventTargetOption","_wrapEventTarget","originalCallback","wrapOptions","originalFunction","eventName","handleEvent","wrappedEventHandler","originalEventHandler","Breadcrumbs","dom","addSentryBreadcrumb","_consoleBreadcrumb","_innerDomBreadcrumb","serializeAttribute","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","parsedLoc","parsedFrom","parsedTo","LinkedErrors","_key","_limit","linkedErrors","_walkErrorTree","_handler","UserAgent","referrer","Referer","Dedupe","currentEvent","previousEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","_isSameMessageEvent","previousException","_getExceptionFromEvent","currentException","_isSameExceptionEvent","_previousEvent","currentFrames","_getFramesFromEvent","previousFrames","frameA","frameB","currentFingerprint","previousFingerprint","BrowserClient","backendClass","_backend","_dsn","_process","_getBackend","_captureEvent","promisedEvent","_isEnabled","_sendSession","getDsn","_isClientDoneProcessing","clientFinished","transportFlushed","_integrations","initialized","_updateSessionFromEvent","crashed","errored","exceptions","sessionNonTerminal","Number","ticked","interval","_numProcessing","clearInterval","_prepareEvent","normalizeMaxBreadth","prepared","_applyClientOptions","_applyIntegrationsMetadata","finalScope","evt","_normalizeEvent","maxBreadth","dist","maxValueLength","integrationsArray","_sendEvent","_processEvent","finalEvent","beforeSend","outcome","isTransaction","__sentry__","nullErr","_ensureBeforeSendRv","processedEvent","promise","showReportDialog","platform","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","startSessionOnHub","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","hasTracingEnabled","maybeOptions","getActiveTransaction","maybeHub","msToSec","time","errorCallback","activeTransaction","setStatus","FINISH_REASON_TAG","IDLE_TRANSACTION_FINISH_REASONS","SpanRecorder","maxlen","_maxlen","spans","spanRecorder","Span","spanContext","substring","traceId","spanId","parentSpanId","sampled","op","description","child","startChild","childSpan","setData","setHttpStatus","httpStatus","spanStatus","spanStatusfromHttpCode","isSuccess","finish","toTraceparent","sampledString","toContext","updateWithContext","parent_span_id","span_id","trace_id","start_timestamp","Transaction","SpanClass","transactionContext","_hub","_trimEnd","trimEnd","setName","initSpanRecorder","setMeasurements","measurements","_measurements","setMetadata","newMetadata","finishedSpans","s","prev","IdleTransactionSpanRecorder","_pushActivity","_popActivity","transactionSpanId","IdleTransaction","_idleHub","_idleTimeout","_onScope","clearActiveTransaction","_initTimeout","_finished","activities","_beforeFinishCallbacks","keepSpan","registerBeforeFinishCallback","pushActivity","popActivity","_pingHeartbeat","end","_beat","heartbeatString","_prevHeartbeatString","_heartbeatCounter","sample","samplingContext","tracesSampler","parentSampled","tracesSampleRate","isValidSampleRate","_startTransaction","maxSpans","addExtensionMethods","_addTracingExtensions","bindReporter","metric","reportAllChanges","prevValue","forceReport","delta","initMetric","entries","floor","observe","PerformanceObserver","supportedEntryTypes","po","l","getEntries","buffered","onHidden","cb","once","onHiddenOrPageHide","removeEventListener","firstHiddenTime","getVisibilityWatcher","timeStamp","reportedMetricIDs","MetricsInstrumentation","_reportAllChanges","mark","_trackCLS","_trackLCP","_trackFID","addPerformanceEntries","responseStartTimestamp","requestStartTimestamp","_performanceCursor","entry","startTime","entryType","addPerformanceNavigationTiming","_startChild","requestStart","responseEnd","responseStart","addRequest","addNavigationSpans","measureStartTimestamp","measureEndTimestamp","addMeasureSpans","firstHidden","shouldRecord","resourceName","origin","initiatorType","transferSize","encodedBodySize","decodedBodySize","addResourceSpans","_trackNavigator","oldValue","measurementTimestamp","normalizedValue","cls","lcpEntry","clsEntry","element","size","sources","node","tagMetricInfo","_lcpEntry","_clsEntry","connection","effectiveType","isMeasurementValue","rtt","downlink","deviceMemory","hardwareConcurrency","onReport","report","sessionValue","sessionEntries","entryHandler","hadRecentInput","firstSessionEntry","lastSessionEntry","takeRecords","getCLS","visibilityWatcher","stopListening","disconnect","capture","getLCP","processingStart","getFID","eventEnd","start","_a","ctx","isFinite","defaultRequestInstrumentationOptions","traceFetch","traceXHR","tracingOrigins","instrumentOutgoingRequests","shouldCreateSpanForRequest","urlMap","defaultShouldCreateSpan","origins","shouldCreateSpan","__span","append","fetchCallback","__sentry_xhr_span_id__","xhrCallback","DEFAULT_BROWSER_TRACING_OPTIONS","idleTimeout","markBackgroundTransactions","maxTransactionDuration","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","startingUrl","pathname","BrowserTracing","_configuredIdleTimeout","_emitOptionsWarning","ie","_metricOptions","_metrics","_getCurrentHub","instrumentRouting","_createRouteTransaction","statusType","beforeNavigate","parentContextFromHeader","metaName","querySelector","getMetaContent","traceparent","matches","extractTraceparentData","getHeaderContext","expandedContext","modifiedContext","finalContext","idleTransaction","onScope","startIdleTransaction","maxDuration","diff","adjustTransactionDuration","SENTRY_RELEASE","autoSessionTracking","clientClass","debug","initialScope","initAndBind","startSessionTracking","internalWrap"],"mappings":"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"}