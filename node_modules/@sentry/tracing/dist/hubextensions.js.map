{"version":3,"file":"hubextensions.js","sourceRoot":"","sources":["../../../src/hubextensions.ts"],"names":[],"mappings":"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","sourcesContent":["import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n} from '@sentry/types';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(transaction: T, options: Options, samplingContext: SamplingContext): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: 'explicitly_set' },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: 'inheritance' },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    IS_DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    IS_DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    IS_DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  IS_DEBUG_BUILD && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    IS_DEBUG_BUILD &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"]}