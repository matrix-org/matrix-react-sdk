{"version":3,"file":"getLCP.js","sourceRoot":"","sources":["../../../../../src/browser/web-vitals/getLCP.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;AAEH,mDAAkD;AAClD,mEAAkE;AAClE,+CAA8C;AAC9C,yCAAiE;AACjE,2CAA0C;AAc1C,IAAM,iBAAiB,GAA4B,EAAE,CAAC;AAEzC,QAAA,MAAM,GAAG,UAAC,QAAuB,EAAE,gBAA0B;IACxE,IAAM,iBAAiB,GAAG,2CAAoB,EAAE,CAAC;IACjD,IAAM,MAAM,GAAG,uBAAU,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,MAAuC,CAAC;IAE5C,IAAM,YAAY,GAAG,UAAC,KAAuB;QAC3C,8EAA8E;QAC9E,2CAA2C;QAC3C,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;QAE9B,2DAA2D;QAC3D,mEAAmE;QACnE,IAAI,KAAK,GAAG,iBAAiB,CAAC,eAAe,EAAE;YAC7C,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YACrB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5B;QAED,IAAI,MAAM,EAAE;YACV,MAAM,EAAE,CAAC;SACV;IACH,CAAC,CAAC;IAEF,IAAM,EAAE,GAAG,iBAAO,CAAC,0BAA0B,EAAE,YAAY,CAAC,CAAC;IAE7D,IAAI,EAAE,EAAE;QACN,MAAM,GAAG,2BAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;QAE1D,IAAM,eAAa,GAAG;YACpB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;gBACjC,EAAE,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,YAAuC,CAAC,CAAC;gBAC9D,EAAE,CAAC,UAAU,EAAE,CAAC;gBAChB,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;gBACpC,MAAM,CAAC,IAAI,CAAC,CAAC;aACd;QACH,CAAC,CAAC;QAEF,qEAAqE;QACrE,yEAAyE;QACzE,uEAAuE;QACvE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;YAC/B,gBAAgB,CAAC,IAAI,EAAE,eAAa,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,mBAAQ,CAAC,eAAa,EAAE,IAAI,CAAC,CAAC;KAC/B;AACH,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n"]}