{"version":3,"file":"getCLS.js","sourceRoot":"","sources":["../../../../../src/browser/web-vitals/getCLS.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,OAAO,EAA2B,MAAM,eAAe,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAiB1C,MAAM,CAAC,IAAM,MAAM,GAAG,UAAC,QAAuB,EAAE,gBAA0B;IACxE,IAAM,MAAM,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACpC,IAAI,MAAuC,CAAC;IAE5C,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,IAAI,cAAc,GAAuB,EAAE,CAAC;IAE5C,IAAM,YAAY,GAAG,UAAC,KAAkB;QACtC,sDAAsD;QACtD,8CAA8C;QAC9C,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YAClC,IAAM,iBAAiB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAM,gBAAgB,GAAG,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAEnE,wEAAwE;YACxE,wEAAwE;YACxE,gEAAgE;YAChE,IACE,YAAY;gBACZ,cAAc,CAAC,MAAM,KAAK,CAAC;gBAC3B,KAAK,CAAC,SAAS,GAAG,gBAAgB,CAAC,SAAS,GAAG,IAAI;gBACnD,KAAK,CAAC,SAAS,GAAG,iBAAiB,CAAC,SAAS,GAAG,IAAI,EACpD;gBACA,YAAY,IAAI,KAAK,CAAC,KAAK,CAAC;gBAC5B,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC5B;iBAAM;gBACL,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;gBAC3B,cAAc,GAAG,CAAC,KAAK,CAAC,CAAC;aAC1B;YAED,qEAAqE;YACrE,iDAAiD;YACjD,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,EAAE;gBAC/B,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC;gBAC5B,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC;gBAChC,IAAI,MAAM,EAAE;oBACV,MAAM,EAAE,CAAC;iBACV;aACF;SACF;IACH,CAAC,CAAC;IAEF,IAAM,EAAE,GAAG,OAAO,CAAC,cAAc,EAAE,YAAuC,CAAC,CAAC;IAC5E,IAAI,EAAE,EAAE;QACN,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;QAE1D,QAAQ,CAAC;YACP,EAAE,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,YAAuC,CAAC,CAAC;YAC9D,MAAM,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\nexport interface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources: Array<LayoutShiftAttribution>;\n  toJSON(): Record<string, unknown>;\n}\n\nexport interface LayoutShiftAttribution {\n  node?: Node;\n  previousRect: DOMRectReadOnly;\n  currentRect: DOMRectReadOnly;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (\n        sessionValue &&\n        sessionEntries.length !== 0 &&\n        entry.startTime - lastSessionEntry.startTime < 1000 &&\n        entry.startTime - firstSessionEntry.startTime < 5000\n      ) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      report(true);\n    });\n  }\n};\n"]}