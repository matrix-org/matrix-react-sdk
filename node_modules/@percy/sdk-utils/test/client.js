(function() {
  this["null"] = this["null"] || {};
  this.PercySDKUtils.TestHelpers = (function (require$$0) {
    'use strict';

    const process = (typeof globalThis !== "undefined" && globalThis.process) || {};
    process.env = process.env || {};
    process.env.__PERCY_BROWSERIFIED__ = true;

    globalThis.process = globalThis.process || process;

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);

    const utils = require$$0__default["default"];

    function stub(object, method, func) {
      if (object[method].restore) object[method].restore();
      let stub = object[method] = Object.assign(function stub() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        stub.calls.push(args);
        if (func) return func.apply(this, args);
      }, {
        restore: () => object[method] = stub.originalValue,
        reset: () => (stub.calls.length = 0) || stub,
        originalValue: object[method],
        calls: []
      });
      return stub;
    } // matches ansi escape sequences


    const ANSI_REG = new RegExp('[\\u001B\\u009B][[\\]()#;?]*((?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)' + '|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))', 'g'); // strips a log message of excessive newlines and asni escape sequences

    function sanitizeLog(str) {
      return str.replace(/\r\n/g, '\n').replace(ANSI_REG, '').replace(/\n$/, '');
    }

    const helpers = {
      async setup() {
        utils.percy.version = '';
        delete utils.percy.config;
        delete utils.percy.enabled;
        delete utils.percy.domScript;
        delete process.env.PERCY_SERVER_ADDRESS;
        await helpers.call('server.mock');
        await helpers.logger.mock();
      },

      async teardown() {
        var _utils$logger$log$res, _utils$logger$log;

        (_utils$logger$log$res = (_utils$logger$log = utils.logger.log).restore) === null || _utils$logger$log$res === void 0 ? void 0 : _utils$logger$log$res.call(_utils$logger$log);

        if (process.env.__PERCY_BROWSERIFIED__) {
          for (let m of ['warn', 'error', 'log']) {
            var _console$m$restore, _console$m;

            (_console$m$restore = (_console$m = console[m]).restore) === null || _console$m$restore === void 0 ? void 0 : _console$m$restore.call(_console$m);
          }
        } else {
          for (let io of ['stdout', 'stderr']) {
            var _process$io$write$res, _process$io$write;

            (_process$io$write$res = (_process$io$write = process[io].write).restore) === null || _process$io$write$res === void 0 ? void 0 : _process$io$write$res.call(_process$io$write);
          }
        }

        return helpers.call('server.close');
      },

      getRequests: () => helpers.call('server.requests'),
      testReply: (path, reply) => helpers.call('server.reply', path, reply),
      testFailure: function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return helpers.call('server.test.failure', ...args);
      },
      testError: path => helpers.call('server.test.error', path),
      testSerialize: fn => !fn ? helpers.call('server.test.serialize') // get
      : helpers.call('server.test.serialize', fn),
      // set
      mockSite: () => helpers.call('site.mock'),
      closeSite: () => helpers.call('site.close'),
      logger: {
        stdout: [],
        stderr: [],
        loglevel: utils.logger.loglevel,

        async mock() {
          helpers.logger.reset();
          let shouldCaptureLogs = false;
          stub(utils.logger, 'log', function () {
            shouldCaptureLogs = true;
            utils.logger.log.originalValue(...arguments);
            shouldCaptureLogs = false;
          });

          let stubLogs = (ctx, method, err) => stub(ctx, method, msg => {
            if (!shouldCaptureLogs) return ctx[method].originalValue.call(ctx, msg);else helpers.logger[err ? 'stderr' : 'stdout'].push(sanitizeLog(msg));
          });

          if (process.env.__PERCY_BROWSERIFIED__) {
            for (let m of ['warn', 'error', 'log']) stubLogs(console, m, m !== 'log');
          } else {
            for (let io of ['stdout', 'stderr']) stubLogs(process[io], 'write', io === 'stderr');
          }
        },

        reset() {
          var _utils$logger$remote$, _utils$logger$log$res2, _utils$logger$log2;

          (_utils$logger$remote$ = utils.logger.remote.socket) === null || _utils$logger$remote$ === void 0 ? void 0 : _utils$logger$remote$.close();
          delete utils.logger.loglevel.lvl;
          delete utils.logger.log.history;
          helpers.logger.stdout.length = 0;
          helpers.logger.stderr.length = 0;
          (_utils$logger$log$res2 = (_utils$logger$log2 = utils.logger.log).reset) === null || _utils$logger$log$res2 === void 0 ? void 0 : _utils$logger$log$res2.call(_utils$logger$log2);

          if (process.env.__PERCY_BROWSERIFIED__) {
            for (let m of ['warn', 'error', 'log']) {
              var _console$m$reset, _console$m2;

              (_console$m$reset = (_console$m2 = console[m]).reset) === null || _console$m$reset === void 0 ? void 0 : _console$m$reset.call(_console$m2);
            }
          } else {
            for (let io of ['stdout', 'stderr']) {
              var _process$io$write$res2, _process$io$write2;

              (_process$io$write$res2 = (_process$io$write2 = process[io].write).reset) === null || _process$io$write$res2 === void 0 ? void 0 : _process$io$write$res2.call(_process$io$write2);
            }
          }
        }

      }
    };

    if (process.env.__PERCY_BROWSERIFIED__) {
      helpers.call = async function call(event) {
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }

        let {
          socket,
          pending = {}
        } = helpers.call;

        if (!socket) {
          socket = new window.WebSocket('ws://localhost:5339');
          await new Promise((resolve, reject) => {
            let done = event => {
              clearTimeout(timeoutid);
              socket.onopen = socket.onerror = null;

              if (event && (event.error || event.type === 'error')) {
                reject(event.error || new Error('Test client connection failed'));
              } else resolve(socket);
            };

            let timeoutid = setTimeout(done, 1000, {
              error: new Error('Test client connection timed out')
            });
            socket.onopen = socket.onerror = done;
          });

          socket.onmessage = _ref => {
            let {
              data
            } = _ref;
            let {
              id,
              resolve,
              reject
            } = JSON.parse(data);
            if (!pending[id]) return;
            if (resolve) pending[id].resolve(resolve.result);
            if (reject) pending[id].reject(reject.error);
          };

          Object.assign(helpers.call, {
            socket,
            pending
          });
        }

        let id = helpers.call.uid = (helpers.call.uid || 0) + 1;
        args = args.map(a => typeof a === 'function' ? a.toString() : a);
        socket.send(JSON.stringify({
          id,
          event,
          args
        }));
        return (pending[id] = {}).promise = new Promise((resolve, reject) => {
          Object.assign(pending[id], {
            resolve,
            reject
          });
        });
      };
    } else {
      helpers.call = async function call() {
        let {
          context
        } = await ({});
        helpers.context = helpers.context || (await context());
        return helpers.context.call(...arguments);
      };
    }

    var helpers_1 = helpers;

    return helpers_1;

  })(PercySDKUtils);
}).call(window);

if (typeof define === "function" && define.amd) {
  define([], () => window.PercySDKUtils.TestHelpers);
} else if (typeof module === "object" && module.exports) {
  module.exports = window.PercySDKUtils.TestHelpers;
}
