import fs from 'fs';
import path from 'path';
import { createRequire } from 'module';
import logger from '@percy/logger';
import { getPackageJSON, Server } from './utils.js'; // need require.resolve until import.meta.resolve can be transpiled

export const PERCY_DOM = createRequire(import.meta.url).resolve('@percy/dom'); // Create a Percy CLI API server instance

export function createPercyServer(percy, port) {
  let pkg = getPackageJSON(import.meta.url);
  let server = Server.createServer({
    port
  }) // facilitate logger websocket connections
  .websocket('/(logger)?', ws => {
    ws.addEventListener('message', ({
      data
    }) => {
      let {
        log,
        messages = []
      } = JSON.parse(data);

      for (let m of messages) logger.instance.messages.add(m);

      if (log) logger.instance.log(...log);
    });
    ws.send(JSON.stringify({
      loglevel: logger.loglevel()
    }));
  }) // general middleware
  .route((req, res, next) => {
    var _percy$testing, _percy$testing3, _percy$testing3$api, _percy$testing4, _percy$testing4$api;

    // treat all request bodies as json
    if (req.body) try {
      req.body = JSON.parse(req.body);
    } catch {} // add version header

    res.setHeader('Access-Control-Expose-Headers', '*, X-Percy-Core-Version'); // skip or change api version header in testing mode

    if (((_percy$testing = percy.testing) === null || _percy$testing === void 0 ? void 0 : _percy$testing.version) !== false) {
      var _percy$testing2;

      res.setHeader('X-Percy-Core-Version', ((_percy$testing2 = percy.testing) === null || _percy$testing2 === void 0 ? void 0 : _percy$testing2.version) ?? pkg.version);
    } // support sabotaging requests in testing mode


    if (((_percy$testing3 = percy.testing) === null || _percy$testing3 === void 0 ? void 0 : (_percy$testing3$api = _percy$testing3.api) === null || _percy$testing3$api === void 0 ? void 0 : _percy$testing3$api[req.url.pathname]) === 'error') {
      return res.json(500, {
        success: false,
        error: 'Error: testing'
      });
    } else if (((_percy$testing4 = percy.testing) === null || _percy$testing4 === void 0 ? void 0 : (_percy$testing4$api = _percy$testing4.api) === null || _percy$testing4$api === void 0 ? void 0 : _percy$testing4$api[req.url.pathname]) === 'disconnect') {
      return req.connection.destroy();
    } // return json errors


    return next().catch(e => res.json(e.status ?? 500, {
      build: percy.build,
      error: e.message,
      success: false
    }));
  }) // healthcheck returns basic information
  .route('get', '/percy/healthcheck', (req, res) => res.json(200, {
    loglevel: percy.loglevel(),
    config: percy.config,
    build: percy.build,
    success: true
  })) // get or set config options
  .route(['get', 'post'], '/percy/config', async (req, res) => res.json(200, {
    config: req.body ? await percy.setConfig(req.body) : percy.config,
    success: true
  })) // responds once idle (may take a long time)
  .route('get', '/percy/idle', async (req, res) => res.json(200, {
    success: await percy.idle().then(() => true)
  })) // convenient @percy/dom bundle
  .route('get', '/percy/dom.js', (req, res) => {
    return res.file(200, PERCY_DOM);
  }) // legacy agent wrapper for @percy/dom
  .route('get', '/percy-agent.js', async (req, res) => {
    logger('core:server').deprecated(['It looks like youâ€™re using @percy/cli with an older SDK.', 'Please upgrade to the latest version to fix this warning.', 'See these docs for more info: https:docs.percy.io/docs/migrating-to-percy-cli'].join(' '));
    let content = await fs.promises.readFile(PERCY_DOM, 'utf-8');
    let wrapper = '(window.PercyAgent = class { snapshot(n, o) { return PercyDOM.serialize(o); } });';
    return res.send(200, 'applicaton/javascript', content.concat(wrapper));
  }) // post one or more snapshots
  .route('post', '/percy/snapshot', async (req, res) => {
    let snapshot = percy.snapshot(req.body);
    if (!req.url.searchParams.has('async')) await snapshot;
    return res.json(200, {
      success: true
    });
  }) // stops percy at the end of the current event loop
  .route('/percy/stop', (req, res) => {
    setImmediate(() => percy.stop());
    return res.json(200, {
      success: true
    });
  }); // add test endpoints only in testing mode

  return !percy.testing ? server : server // manipulates testing mode configuration to trigger specific scenarios
  .route('/test/api/:cmd', ({
    body,
    params: {
      cmd
    }
  }, res) => {
    body = Buffer.isBuffer(body) ? body.toString() : body;

    if (cmd === 'reset') {
      // the reset command will reset testing mode and clear any logs
      percy.testing = {};
      logger.instance.messages.clear();
    } else if (cmd === 'version') {
      // the version command will update the api version header for testing
      percy.testing.version = body;
    } else if (cmd === 'error' || cmd === 'disconnect') {
      // the error or disconnect commands will cause specific endpoints to fail
      percy.testing.api = { ...percy.testing.api,
        [body]: cmd
      };
    } else {
      // 404 for unknown commands
      return res.send(404);
    }

    return res.json(200, {
      testing: percy.testing
    });
  }) // returns an array of raw logs from the logger
  .route('get', '/test/logs', (req, res) => res.json(200, {
    logs: Array.from(logger.instance.messages)
  })) // serves a very basic html page for testing snapshots
  .route('get', '/test/snapshot', (req, res) => {
    return res.send(200, 'text/html', '<p>Snapshot Me!</p>');
  });
} // Create a static server instance with an automatic sitemap

export function createStaticServer(options) {
  let {
    serve: dir,
    baseUrl = '/'
  } = options;
  let server = Server.createServer(options); // used when generating an automatic sitemap

  let toURL = Server.createRewriter( // reverse rewrites' src, dest, & order
  Object.entries((options === null || options === void 0 ? void 0 : options.rewrites) ?? {}).reduce((acc, rw) => [rw.reverse(), ...acc], []), (filename, rewrite) => new URL(path.posix.join(baseUrl, // cleanUrls will trim trailing .html/index.html from paths
  !options.cleanUrls ? rewrite(filename) : rewrite(filename).replace(/(\/index)?\.html$/, '')), server.address())); // include automatic sitemap route

  server.route('get', '/sitemap.xml', async (req, res) => {
    let {
      default: glob
    } = await import('fast-glob');
    let files = await glob('**/*.html', {
      cwd: dir,
      fs
    });
    return res.send(200, 'application/xml', ['<?xml version="1.0" encoding="UTF-8"?>', '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">', ...files.map(name => `  <url><loc>${toURL(name)}</loc></url>`), '</urlset>'].join('\n'));
  });
  return server;
}