import * as React from "react";
import { ModuleApi } from "../ModuleApi";
import { PlainSubstitution } from "../types/translations";
export interface DialogProps {
    moduleApi: ModuleApi;
}
export interface DialogState {
    busy: boolean;
    error?: string;
}
export declare abstract class DialogContent<P extends DialogProps = DialogProps, S extends DialogState = DialogState, M extends object = {}> extends React.PureComponent<P, S> {
    protected constructor(props: P, state?: S);
    /**
     * Run a string through the translation engine. Shortcut to ModuleApi#translateString().
     * @param s The string.
     * @param variables The variables, if any.
     * @returns The translated string.
     * @protected
     */
    protected t(s: string, variables?: Record<string, PlainSubstitution>): string;
    /**
     * Called when the dialog is submitted. Note that calling this will not submit the
     * dialog by default - this component will be wrapped in a form which handles keyboard
     * submission and buttons on its own.
     *
     * If the returned promise resolves then the dialog will be closed, otherwise the dialog
     * will stay open.
     */
    abstract trySubmit(): Promise<M>;
}
